% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/emulate.R
\docType{methods}
\name{emulate}
\alias{emulate}
\alias{emulate,ANY,ANY-method}
\alias{emulate,character,vector-method}
\alias{emulate,data.frame,randomForest-method}
\alias{emulate,vector,character-method}
\alias{emulate,vector,factor-method}
\title{Make one object emulate another}
\usage{
emulate(x, template, ...)

\S4method{emulate}{data.frame,randomForest}(x, template, default = "Other")

\S4method{emulate}{vector,factor}(x, template, default = NA)

\S4method{emulate}{character,vector}(x, template, default = NA)

\S4method{emulate}{ANY,ANY}(x, template, ...)
}
\arguments{
\item{x}{object to change}

\item{template}{object to emulate}

\item{...}{additional parameters 

\code{emulate} makes \code{x} more like a \code{template} so that \code{x} 
can be used in places where \code{template} is used. The goal is to change. 
This generally means coercing to the type of \code{template} and only 
containing values found in \code{template}.

For the \code{randomForest} method, this requires adding a \code{default}}

\item{default}{character value for missing values}
}
\value{
Returns \code{x} that emulates \code{template}
  
  The ANY-ANY method simply returns \code{template}
}
\description{
Make one object more like another
}
\examples{
  iris2 <- droplevels( iris[1:100, ])
  f <- randomForest( Sepal.Length ~ . , iris2 )
  
  emulate( iris, f )
a <- factor( letters[1:3] )
b <- factor( letters[1:6] )

emulate( x=a, template=b )    # adds levels of x

emulate( x=b, template=a )    # a    b    c    <NA> <NA> <NA>
emulate( x=b, template=a, default="a" )

  a <- letters[1:3] 
  b <- letters[1:6] 

  emulate( x=a, template=b ) 
  
  emulate( x=b, template=a ) 
  emulate( x=b, template=a, default="default" )
}
\seealso{
\code{\link{apply.pattern}} 
  \code{\link[dp.misc]{conform}}
  \code{\link[plyr]{rbind.fill}}
}

