% Generated by roxygen2 (4.0.1.99): do not edit by hand
\docType{methods}
\name{emulate}
\alias{emulate}
\alias{emulate,ANY,ANY-method}
\alias{emulate,character,vector-method}
\alias{emulate,factor,vector-method}
\alias{emulate,randomForest,data.frame-method}
\alias{emulate,randomForest,data.table-method}
\alias{emulate,vector,character-method}
\alias{emulate,vector,factor-method}
\title{Make one object emulate another}
\usage{
emulate(x, y, ...)

\S4method{emulate}{randomForest,data.frame}(x, y, default = " __OTHER__")

\S4method{emulate}{factor,vector}(x, y, default = NA)

\S4method{emulate}{character,vector}(x, y, default = NA)

\S4method{emulate}{ANY,ANY}(x, y, ...)
}
\arguments{
\item{x}{object to emulate}

\item{y}{object to effect and return}

\item{...}{additional parameters

\code{emulate} makes \code{x} more like \code{y} so that \code{x} can be
used in place of \code{y} with changing the data as little as possible.  This
generally means coercing to the type of \code{y} and only containing the
values that are in \code{y}.

For the \code{randomForest} method, this requires adding a \code{default}}
}
\value{
Returns \code{x} that emulates \code{y}

  The ANY-ANY method simply returns \code{x}
}
\description{
Make one object more like another
}
\examples{
iris2 <- droplevels( iris[1:100, ])
  f <- randomForest( Sepal.Length ~ . , iris2 )

  emulate( f, iris )
x <- factor( letters[1:3] )
y <- factor( letters[1:6] )

emulate( x, y ) # a    b    c    <NA> <NA> <NA>
emulate( y, x ) # adds levels of y
emulate( x, y, default="b" )
x <- letters[1:6]
y <- letters[1:3]

emulate( x, y )
emulate( y, x )
emulate( x, y, default="b" )
}

